// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Block {
  blocked   User   @relation("BlockedOnBlocks", fields: [blockedId], references: [id])
  blockedId String

  blockedBy   User   @relation("BlockersOnBlocks", fields: [blockedById], references: [id])
  blockedById String

  createdAt DateTime @default(now())

  @@id([blockedId, blockedById])
}

model Comment {
  id        String   @id @default(uuid())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation("AuthorsOnComments", fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  children Comment[] @relation("ParentChildren")

  likedBy User[] @relation("LikesOnComments")

  parent   Comment? @relation("ParentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?

  rootId String?

  notification Notification?
}

model Invitation {
  rsvp      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  notification Notification?

  recipient   User   @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String

  @@id([eventId, recipientId])
}

model Event {
  id        String   @id @default(uuid())
  name      String
  location  String
  startTime DateTime
  endTime   DateTime
  deadline  DateTime
  rsvp      String?
  private   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]

  host   User   @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId String

  invitations Invitation[]

  joinRequests JoinRequest[]

  Notification Notification?
}

model FriendRequest {
  recipient   User   @relation("RecipientsOnFriendRequests", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String

  sender   User   @relation("SendersOnFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  notification Notification?

  createdAt DateTime @default(now())

  @@id([recipientId, senderId])
}

model Friendship {
  acceptedBy   User   @relation("AcceptorsOnFriendships", fields: [acceptedById], references: [id])
  acceptedById String

  initiatedBy   User   @relation("InitiatorsOnFriendships", fields: [initiatedById], references: [id])
  initiatedById String

  notification Notification?

  createdAt DateTime @default(now())

  @@id([acceptedById, initiatedById])
}

model JoinRequest {
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  notification Notification?

  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  createdAt DateTime @default(now())

  @@id([eventId, senderId])
}

model Notification {
  id       String  @id @default(uuid())
  body     String
  redirect String
  unread   Boolean @default(true)

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?  @unique

  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String? @unique

  friendRequest  FriendRequest? @relation(fields: [fr_recipientId, fr_senderId], references: [recipientId, senderId], onDelete: Cascade)
  fr_recipientId String?
  fr_senderId    String?

  friendship       Friendship? @relation(fields: [fs_acceptedById, fs_initiatedById], references: [acceptedById, initiatedById], onDelete: Cascade)
  fs_acceptedById  String?
  fs_initiatedById String?

  invitation     Invitation? @relation(fields: [in_eventId, in_recipientId], references: [eventId, recipientId], onDelete: Cascade)
  in_eventId     String?
  in_recipientId String?

  joinRequest JoinRequest? @relation(fields: [jr_eventId, jr_senderId], references: [eventId, senderId], onDelete: Cascade)
  jr_eventId  String?
  jr_senderId String?

  recipient   User   @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String

  @@unique([fr_recipientId, fr_senderId])
  @@unique([fs_acceptedById, fs_initiatedById])
  @@unique([in_eventId, in_recipientId])
  @@unique([jr_eventId, jr_senderId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  private       Boolean   @default(false)

  accounts Account[]

  blocked   Block[] @relation("BlockersOnBlocks")
  blockedBy Block[] @relation("BlockedOnBlocks")

  comments Comment[] @relation("AuthorsOnComments")

  friended   Friendship[] @relation("InitiatorsOnFriendships")
  friendedBy Friendship[] @relation("AcceptorsOnFriendships")

  hostedEvents Event[]

  invitations Invitation[]

  likedComments Comment[] @relation("LikesOnComments")

  notifications Notification[]

  receivedFriendRequests FriendRequest[] @relation("RecipientsOnFriendRequests")
  sentFriendRequests     FriendRequest[] @relation("SendersOnFriendRequests")

  sentJoinRequest JoinRequest[]

  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
