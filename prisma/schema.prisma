// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id                 String               @id @default(uuid())
  event              Event                @relation(fields: [eventId], references: [id])
  eventId            String
  author             User                 @relation(fields: [authorId], references: [id])
  authorId           String
  parent             Comment?             @relation("RepliesOnComments", fields: [parentId], references: [id])
  parentId           String?
  children           Comment[]            @relation("RepliesOnComments")
  tags               User[]               @relation("TagsOnComments")
  watchers           User[]               @relation("WatchersOnComments")
  privated           Boolean
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  TagsOnComments     TagsOnComments[]
  WatchersOnComments WatchersOnComments[]
}

model Event {
  id               String             @id @default(uuid())
  name             String
  location         String
  invitees         User[]             @relation("InviteesOnEvents")
  hosts            User[]             @relation("HostsOnEvents")
  comments         Comment[]
  privated         Boolean
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  HostsOnEvents    HostsOnEvents[]
  InviteesOnEvents InviteesOnEvents[]
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String               @id @default(uuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  createdComments    Comment[]
  taggedComments     Comment[]            @relation("TagsOnComments")
  watchedComments    Comment[]            @relation("WatchersOnComments")
  hostedEvents       Event[]              @relation("HostsOnEvents")
  invitedEvents      Event[]              @relation("InviteesOnEvents")
  sessions           Session[]
  privated           Boolean
  HostsOnEvents      HostsOnEvents[]
  InviteesOnEvents   InviteesOnEvents[]
  TagsOnComments     TagsOnComments[]
  WatchersOnComments WatchersOnComments[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HostsOnEvents {
  host      User     @relation(fields: [hostId], references: [id])
  hostId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([hostId, eventId])
}

model InviteesOnEvents {
  invitee   User     @relation(fields: [inviteeId], references: [id])
  inviteeId String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  invitedAt DateTime @default(now())
  invitedBy String

  @@id([inviteeId, eventId])
}

model TagsOnComments {
  taggedUser   User    @relation(fields: [taggedUserId], references: [id])
  taggedUserId String
  comment      Comment @relation(fields: [commentId], references: [id])
  commentId    String

  @@id([taggedUserId, commentId])
}

model WatchersOnComments {
  watcher   User    @relation(fields: [watcherId], references: [id])
  watcherId String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  @@id([watcherId, commentId])
}
